For creating a triangle we first come up with the coordinates for
the 3 points in a triangle and shove them into a GLfloat array.

GLfloat points[] = {
  0.0f, 0.5f, 0.0f,
  0.5f, -0.5f, 0.0f,
  -0.5f, -0.5f, 0.0f,
};

then copy that chunk of memory onto a chunk of memory onto the
graphics card unit called a

  VBO - vertex buffer object.

  Once the points are created we -

  generate a handle to a vbo buffer via glGenBuffers

  bind the buffer via glBindBuffer

  give the data to the gfx card via glBufferData

Once are vertex buffer objects are created we create a VAO which 
remembers all of the vertex buffers that we want to use and the memory
layout of each one. Set up the vertex array object once per mesh

The advantage of this is we don't need to rebind VBOs if there are 
multiple for a mesh. Associate them all with a VAO, bind it before
drawing and then draw.

  glVertexAttribPointer - A bit confusing but seems to define how
  vertices will be interpreted in the shader.

  As in the input to a vertex shader may be in vec3 vp and the 3 in
  the second index of glVertexAttribPointer guarantees that.

To draw we need shaders -

  vertex shader - Draw for each vertex.

  fragment shader - Draws the surface between vertices.

* If 4th component in gl_position of vertex shader is a 1.0 that means
don't calculate any perspective.

ONce a vertex and fragment shader are compiled via glShaderSource and
glCompileShader they must be combined into a program.


